{"version":3,"sources":["logo.svg","components/Button.tsx","components/Option.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","className","type","onClick","handleClick","text","Option","App","useState","initDuration","setInitDuration","duration","setDuration","timer","setTimer","getText","minute","Math","floor","second","timerStop","clearInterval","timerStart","timerReset","setInterval","prevDuration","resetTimer","minutes","useEffect","Notification","icon","Logo","optionsItem","map","option","key","buttonsItem","button","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1d18fb95.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\n\nimport './Button.css'\n\ninterface Props {\n    type?: string\n    text: string\n    handleClick: () => void\n}\n\nconst Button: React.FC<Props> = (props) => {\n    let className: string = 'btn'\n\n    if (props.type) {\n        className += ` btn-${props.type}`\n    }\n\n    return (\n        <button onClick={props.handleClick} className={className}>{props.text}</button>\n    )\n}\n\nexport default Button","import React from 'react'\n\nimport './Option.css'\n\ninterface Props {\n  text: string\n  handleClick: () => void\n}\n\nconst Option:React.FC<Props> = (props) => {\n  return (\n    <button className=\"option\" onClick={props.handleClick}>{props.text}</button>\n  )\n}\n\nexport default Option","import React, { useEffect, useState } from 'react'\n\nimport Button from './components/Button'\nimport Option from './components/Option'\nimport './App.css'\nimport Logo from './logo.svg'\n\nconst App: React.FC = () => {\n  const [initDuration, setInitDuration] = useState(1500)\n  const [duration, setDuration] = useState(1500)\n  const [timer, setTimer] = useState()\n\n  const getText = (duration: number): string => {\n    let minute: number = Math.floor(duration / 60)\n    let second: number = duration % 60\n    return `${minute} : ${second < 10 ? `0${second}` : second}`\n  }\n\n  const timerStop = () => {\n    timer && clearInterval(timer)\n  }\n\n  const timerStart = () => {\n    if (duration === 0) timerReset()\n    if (timer) timerStop()\n\n    setTimer(\n      setInterval(() => {\n        setDuration(prevDuration => {\n          return prevDuration - 1\n        })\n      }, 1000)\n    )\n  }\n\n  const timerReset = () => {\n    timerStop()\n    setDuration(initDuration)\n  }\n\n  const resetTimer = (minutes: number) => {\n    setInitDuration(minutes * 60)\n    setDuration(minutes * 60)\n    timerStart()\n  }\n\n  useEffect(() => {\n    if (duration === 0) {\n      new Notification(`奈斯! ${getText(initDuration)} 计时结束！`, {\n        icon: Logo\n      })\n      timerStop()\n    }\n  })\n\n  const options = [\n    {\n      text: '番茄',\n      handleClick: () => {resetTimer(25)},\n    },{\n      text: '短休息',\n      handleClick: () => {resetTimer(5)}\n    },{\n      text: '长休息',\n      handleClick: () => {resetTimer(10)}\n    },\n  ]\n  const optionsItem = options.map(option =>\n    <Option key={option.text} text={option.text} handleClick={option.handleClick}/>\n  )\n\n  const buttons = [\n    {\n      text: '开始',\n      type: 'success',\n      handleClick: timerStart\n    },{\n      text: '暂停',\n      type: 'danger',\n      handleClick: timerStop\n    },{\n      text: '重置',\n      type: 'default',\n      handleClick: timerReset\n    },\n  ]\n  const buttonsItem = buttons.map(button =>\n    <Button key={button.text} type={button.type} text={button.text} handleClick={button.handleClick}/>\n  )\n\n  return (\n    <div className='app'>\n      <h2 className='header'>番茄钟</h2>\n      <div className='option-groups'>\n        {optionsItem}\n      </div>\n      <h1 className='timer-text'>{getText(duration)}</h1>\n      <div className='btn-groups'>\n        {buttonsItem}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}